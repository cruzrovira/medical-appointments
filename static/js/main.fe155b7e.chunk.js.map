{"version":3,"sources":["components/form.js","components/Appointment.js","components/appointmentsList.js","App.js","serviceWorker.js","index.js"],"names":["FormStyled","styled","form","Form","addAppointment","nameRef","useRef","lastNameRef","dateRef","hourRef","symptomsRef","onSubmit","event","preventDefault","name","current","value","lastName","date","hour","symptoms","trim","length","setCustomValidity","appointment","id","uuidv4","focus","addform","htmlFor","type","ref","AppointmentStyled","div","Appointment","daleteAppointment","onClick","AppointmentsListStyled","AppointmentsList","appointmentList","className","map","key","AppStyled","App","useState","setAppointmentList","useEffect","newAppointmentList","localStorage","getItem","JSON","parse","setItem","stringify","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe155b7e.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst FormStyled = styled.form`\r\n  background: #fff;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.3);\r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 10px;\r\n  }\r\n  input[type=\"text\"],\r\n  input[type=\"date\"],\r\n  input[type=\"time\"],\r\n  textarea {\r\n    width: 100%;\r\n    max-width: 100%;\r\n    border: 1px solid purple;\r\n    border-radius: 4px;\r\n    line-height: 3em;\r\n    outline: none;\r\n    margin-bottom: 10px;\r\n    padding-left: 10px;\r\n  }\r\n  input[type=\"submit\"] {\r\n    background: purple;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n    line-height: 3em;\r\n    width: 5em;\r\n    outline: none;\r\n    cursor: pointer;\r\n  }\r\n  input[type=\"submit\"]:active {\r\n    transform: scale(0.9);\r\n  }\r\n`;\r\n\r\nconst Form = ({ addAppointment }) => {\r\n  let nameRef = useRef();\r\n  let lastNameRef = useRef();\r\n  let dateRef = useRef();\r\n  let hourRef = useRef();\r\n  let symptomsRef = useRef();\r\n\r\n  let addform = (event) => {\r\n    event.preventDefault();\r\n    let name = nameRef.current.value;\r\n    let lastName = lastNameRef.current.value;\r\n    let date = dateRef.current.value;\r\n    let hour = hourRef.current.value;\r\n    let symptoms = symptomsRef.current.value;\r\n\r\n    // validations\r\n    if (name.trim().length === 0) {\r\n      nameRef.current.setCustomValidity(\"required item\");\r\n      return null;\r\n    } else {\r\n      nameRef.current.setCustomValidity(\"\");\r\n    }\r\n\r\n    if (lastName.trim().length === 0) {\r\n      lastNameRef.current.setCustomValidity(\"required item\");\r\n      return null;\r\n    } else {\r\n      lastNameRef.current.setCustomValidity(\"\");\r\n    }\r\n\r\n    if (date.trim().length === 0) {\r\n      dateRef.current.setCustomValidity(\"required item\");\r\n      return null;\r\n    } else {\r\n      dateRef.current.setCustomValidity(\"\");\r\n    }\r\n\r\n    if (hour.trim().length === 0) {\r\n      hourRef.current.setCustomValidity(\"required item\");\r\n      return null;\r\n    } else {\r\n      hourRef.current.setCustomValidity(\"\");\r\n    }\r\n\r\n    let appointment = { id: uuidv4(), name, lastName, date, hour, symptoms };\r\n\r\n    addAppointment(appointment);\r\n\r\n    nameRef.current.value = \"\";\r\n    lastNameRef.current.value = \"\";\r\n    dateRef.current.value = \"\";\r\n    hourRef.current.value = \"\";\r\n    symptomsRef.current.value = \"\";\r\n    nameRef.current.focus();\r\n  };\r\n  return (\r\n    <FormStyled\r\n      onSubmit={(event) => {\r\n        addform(event);\r\n      }}\r\n    >\r\n      <h2>add Appointments</h2>\r\n      <label htmlFor=\"name\">Name*</label>\r\n      <input type=\"text\" id=\"name\" ref={nameRef} />\r\n      <label htmlFor=\"lastName\">last name*</label>\r\n      <input type=\"text\" id=\"lastName\" ref={lastNameRef} />\r\n      <label htmlFor=\"date\">Date*</label>\r\n      <input type=\"date\" id=\"date\" ref={dateRef} />\r\n      <label htmlFor=\"hour\">Hour*</label>\r\n      <input type=\"time\" id=\"hour\" ref={hourRef} />\r\n      <label htmlFor=\"symptoms\">symptoms</label>\r\n      <textarea id=\"symptoms\" ref={symptomsRef} />\r\n      <input type=\"submit\" value=\"Add\" />\r\n    </FormStyled>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst AppointmentStyled = styled.div`\r\n  background: #fff;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.3);\r\n  margin-bottom: 12px;\r\n  p {\r\n    margin: 0;\r\n  }\r\n\r\n  button {\r\n    background: purple;\r\n    color: #fff;\r\n    border: none;\r\n    border-radius: 4px;\r\n    line-height: 3em;\r\n    width: 5em;\r\n    outline: none;\r\n    cursor: pointer;\r\n    margin-top: 10px;\r\n  }\r\n  button:active {\r\n    transform: scale(0.9);\r\n  }\r\n`;\r\n\r\nconst Appointment = ({\r\n  id,\r\n  name,\r\n  lastName,\r\n  date,\r\n  hour,\r\n  symptoms,\r\n  daleteAppointment,\r\n}) => {\r\n  let daleteAppointmentList = () => {\r\n    daleteAppointment(id);\r\n  };\r\n\r\n  return (\r\n    <AppointmentStyled>\r\n      <p>\r\n        <strong>Name: </strong>\r\n        {name}\r\n      </p>\r\n      <p>\r\n        <strong>Last name: </strong>\r\n        {lastName}\r\n      </p>\r\n      <p>\r\n        <strong>Date: </strong>\r\n        {date}\r\n      </p>\r\n      <p>\r\n        <strong>Hour: </strong>\r\n        {hour}\r\n      </p>\r\n      <p>\r\n        <strong>Symptoms: </strong>\r\n        {symptoms}\r\n      </p>\r\n      <button\r\n        onClick={() => {\r\n          daleteAppointmentList();\r\n        }}\r\n      >\r\n        Delete\r\n      </button>\r\n    </AppointmentStyled>\r\n  );\r\n};\r\n\r\nexport default Appointment;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Appointment from \"./Appointment\";\r\nconst AppointmentsListStyled = styled.div`\r\n  .card {\r\n    background: #fff;\r\n    padding: 10px;\r\n    border-radius: 4px;\r\n    box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.3);\r\n  }\r\n\r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst AppointmentsList = ({ appointmentList, daleteAppointment }) => {\r\n  return (\r\n    <AppointmentsListStyled>\r\n      {appointmentList.length === 0 ? (\r\n        <div className=\"card\">\r\n          <h2>There are no Appointments</h2>\r\n        </div>\r\n      ) : (\r\n        appointmentList.map((appointment) => {\r\n          let { id, name, lastName, date, hour, symptoms } = appointment;\r\n\r\n          return (\r\n            <Appointment\r\n              id={id}\r\n              name={name}\r\n              lastName={lastName}\r\n              date={date}\r\n              hour={hour}\r\n              symptoms={symptoms}\r\n              daleteAppointment={daleteAppointment}\r\n              key={id}\r\n            />\r\n          );\r\n        })\r\n      )}\r\n    </AppointmentsListStyled>\r\n  );\r\n};\r\n\r\nexport default AppointmentsList;\r\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport Form from \"./components/form\";\nimport AppointmentsList from \"./components/appointmentsList\";\n\nconst AppStyled = styled.div`\n  h1 {\n    text-align: center;\n    color: #fff;\n    text-transform: uppercase;\n    word-spacing: 15px;\n  }\n  .container {\n    max-width: 1024px;\n    width: 80%;\n    margin: auto;\n  }\n  .item {\n    margin-bottom: 10px;\n  }\n  @media screen and (min-width: 700px) {\n    .container {\n      display: flex;\n      justify-content: space-between;\n    }\n    .item {\n      width: 49%;\n      margin-bottom: none;\n    }\n  }\n`;\nfunction App() {\n  let [appointmentList, setAppointmentList] = useState([]);\n  let addAppointment = (appointment) => {\n    setAppointmentList([...appointmentList, appointment]);\n  };\n  let daleteAppointment = (id) => {\n    let newAppointmentList = appointmentList.filter(\n      (appointment) => appointment.id !== id\n    );\n\n    setAppointmentList(newAppointmentList);\n  };\n\n  useEffect(() => {\n    let newAppointmentList = localStorage.getItem(\"appointmentList\");\n    if (newAppointmentList) {\n      setAppointmentList(JSON.parse(newAppointmentList));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"appointmentList\", JSON.stringify(appointmentList));\n  }, [appointmentList]);\n\n  return (\n    <AppStyled>\n      <h1>Medical Appointments</h1>\n      <div className=\"container\">\n        <div className=\"item\">\n          <Form addAppointment={addAppointment} />\n        </div>\n        <div className=\"item\">\n          <AppointmentsList\n            appointmentList={appointmentList}\n            daleteAppointment={daleteAppointment}\n          />\n        </div>\n      </div>\n    </AppStyled>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}